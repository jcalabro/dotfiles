#!/usr/bin/env bash

function run_if_exists {
    if [ -f $1 ]; then
        source $1
    fi
}

run_if_exists ~/.git-completion.bash

export EDITOR="hx"

export TSAN_OPTIONS="suppressions=$HOME/.tsan_suppressions"
export GHOSTTY_SHELL_INTEGRATION_NO_CURSOR=1

#
# X options
#

if [ -x "$(command -v setxkbmap)" ] && [ -n "$DISPLAY" ]; then
    setxkbmap -option caps:ctrl_modifier
fi

#
# Path
#

export LOCAL_BIN_DIR="$HOME/local/bin"
if [[ $(whoami) == "root" ]]; then
    export LOCAL_BIN_DIR="/home/jcalabro/local/bin"
fi

export PATH="$PATH:/usr/share/bcc/tools"
export PATH="$PATH:/home/jcalabro/.nix-profile/bin"
export PATH="$PATH:$LOCAL_BIN_DIR"
export PATH="$PATH:$LOCAL_BIN_DIR/bin"
export PATH="$PATH:$LOCAL_BIN_DIR/helix"
export PATH="$PATH:$LOCAL_BIN_DIR/odin"
export PATH="$PATH:$LOCAL_BIN_DIR/jai/bin"
export PATH="$PATH:$LOCAL_BIN_DIR/odin"
export PATH="$PATH:$LOCAL_BIN_DIR/nodejs/bin"
export PATH="$PATH:$LOCAL_BIN_DIR/google-cloud-sdk/bin"
export PATH="$PATH:$LOCAL_BIN_DIR/go/bin"
export PATH="$PATH:$LOCAL_BIN_DIR/4coder"
export PATH="$PATH:$LOCAL_BIN_DIR/fred"
export PATH="$PATH:$LOCAL_BIN_DIR/tc"
export PATH="$PATH:$LOCAL_BIN_DIR/spall"
export PATH="$PATH:$LOCAL_BIN_DIR/nand2tetris/tools"
export PATH="$PATH:/opt/homebrew/bin"
export PATH="$PATH:/opt/homebrew/opt/llvm/bin"
export PATH="$PATH:/opt/homebrew/opt/anyzig/bin"
run_if_exists "/opt/homebrew/share/google-cloud-sdk/path.bash.inc"

export PATH="$PATH:$LOCAL_BIN_DIR/kafka/bin"
export JAVA_HOME="/opt/homebrew/opt/java"

if [ -x "$(command -v brew)" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
fi

alias sus="systemctl suspend -i"

function bp {
    pushd $HOME > /dev/null
    source .bash_profile
    popd > /dev/null
}

function prompt {
  local BLACK="\[\033[0;30m\]"
  local BLACKBOLD="\[\033[1;30m\]"
  local RED="\[\033[0;31m\]"
  local REDBOLD="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local GREENBOLD="\[\033[1;32m\]"
  local YELLOW="\[\033[0;33m\]"
  local YELLOWBOLD="\[\033[1;33m\]"
  local BLUE="\[\033[0;34m\]"
  local BLUEBOLD="\[\033[1;34m\]"
  local PURPLE="\[\033[0;35m\]"
  local PURPLEBOLD="\[\033[1;35m\]"
  local CYAN="\[\033[0;36m\]"
  local CYANBOLD="\[\033[1;36m\]"
  local WHITE="\[\033[0;37m\]"
  local WHITEBOLD="\[\033[1;37m\]"
  local RESETCOLOR="\[\e[00m\]"

  export PS1="\n$CYANBOLD\h $RED\u $BLUEBOLD\D{%F %T} $CYANBOLD\w $RESETCOLOR$GREENBOLD\n$BLUEBOLD$ $RESETCOLOR"
  export PS2=" | â†’ $RESETCOLOR"
}

prompt

#
# Make bash_history record much longer (default is 500)
#
export HISTFILESIZE=10000000
export HISTSIZE=10000000

#
# Overrides some default keybindings so vim controls work
#
if [ -t 0 ] && [ -t 1 ]; then
    stty -ixon
fi

#
# Iterm2 color scheme
#
export CLICOLOR=1

#
# rabbitmq is installed to /usr/local/sbin over homebrew
#
export PATH="$PATH:/usr/local/sbin"

#
# Set Arch keybindings
#
xmodmap ~/.xmodmap &> /dev/null
xset r rate 275 50 &> /dev/null

#
# Save dotfiles in the $HOME directory to source control
#
function save_dotfiles {
    echo -n "Are you sure (y/N)? "
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        echo "Saving"
    else
        echo "Exiting"
        return
    fi

    pushd "$HOME/misc/dotfiles" > /dev/null
    git add -A
    git commit --no-verify -S -m "updating dotfiles"
    git push > /dev/null 2>&1
    popd > /dev/null

    echo "Done"
}
function pd {
    pushd "$HOME/misc/dotfiles" > /dev/null
    git pull -r origin main
    popd > /dev/null

    echo "Done"
}

#
# Use brew's python over local system python
#
export PATH="usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:$HOME/.local/bin:$HOME/bin:$PATH"

#
# On centos, check for modern versions of gcc first
#
export PATH="/opt/rh/devtoolset-10/root/bin:$PATH"

#
# Logbook
#
export LOGBOOK="$HOME/misc/logbook"

function lb() {
    CP=cp
    if [ $(uname -s) == "Darwin" ]; then
        CP=gcp # gnu cp
    fi

    pushd $LOGBOOK > /dev/null
    P="$(date '+%Y-%m')"
    mkdir -p $P
    F="$P/$(date '+%d').md"
    $CP --update=none template.md $F
    FULL_PATH=$(pwd)/$F
    popd > /dev/null
    $EDITOR $FULL_PATH
}

#
# Save logs
#
function clog {
    pushd $LOGBOOK > /dev/null
    git add -A
    git commit -S -m "todays logs $(date '+%Y-%m-%d %H:%M:%S')"
    git push
    popd > /dev/null
}

#
# Pull latest logs
#
function pl {
    pushd $LOGBOOK > /dev/null
    git pull -r origin main
    popd > /dev/null
}

#
# Open yesterday's logs
#
function logbook {
    TARGET_DATE=$1
    if [ -z "$TARGET_DATE" ]; then
        # default to yesterday's date
        TARGET_DATE=$(date -d "yesterday" '+%m-%d-%Y')
    fi

    YEAR=$(echo $TARGET_DATE | cut -d '-' -f 3)
    MONTH=$(echo $TARGET_DATE | cut -d '-' -f 1)
    DIRECTORY="$YEAR-$MONTH"

    curl "https://$GITHUB_TOKEN@raw.githubusercontent.com/jcalabro/logbook/main/$DIRECTORY/$TARGET_DATE.md"
}


#
# Initialize pyenv if it is installed
#
which pyenv &> /dev/null
if [ "$?" -eq "0" ]; then
    eval "$(pyenv init -)"
    export PYTHONPATH=".:$PYTHONPATH"
    export PYENV_ROOT=$HOME/.pyenv
    export PYENV_VIRTUALENV_DISABLE_PROMPT=1
    export PATH=$PYENV_ROOT/bin:${PATH}
fi

#
# SSH keys
#
which ssh-agent &> /dev/null
if [ "$?" -eq "0" ]; then
    eval `ssh-agent` > /dev/null
    ssh-add -A > /dev/null 2>&1

    eval `ssh-add $HOME/.ssh/jim_public.pem > /dev/null 2>&1`
    eval `ssh-add $HOME/.ssh/jim_bsky.pem > /dev/null 2>&1`
    eval `ssh-add $HOME/.ssh/jcalabro.pem > /dev/null 2>&1`
fi

#
# Resets the local DNS cache in macOS 10.12+
#
function flush_dns {
    sudo killall -HUP mDNSResponder
}

#
# Filter dupes function returns the set of unique rows
# for the given input
#
function filter_dupes {
    awk '!a[$0]++'
}

#
# Quick base64 decode
#
function decode64 {
    if [ $(uname -s) != "Linux" ]; then
        echo "$1" | base64 -D
    else
        echo "$1" | base64 -d
    fi
}

#
# Find/Replace function
#
function replace {
    grep -rl "$1" . | xargs sed -i "" "s/$1/$2/g"
}

function delpod {
    if [ ! -z "$1" ]; then
        kubectl get pods | grep $1 | cut -f 1 -d " " | xargs -L 1 kubectl delete pod
    else
        echo "No query specified, doing nothing"
    fi
}

#
# Initialize a public github repo with email and signing key
#
function init_public_repo {
    git config --local user.email jamesrcalabro@gmail.com
    git config --local user.signingkey "$HOME_SIGN_KEY"
}
function init_work_repo {
    git config --local user.email "$WORK_EMAIL"
    git config --local user.signingkey "$WORK_SIGN_KEY"
}

function whatsmyip {
    curl https://ipinfo.io
}

function restart_logtech {
    ps aux | grep -i logi | grep -v login | awk '{print $2}' | xargs -L1 sudo kill -9
}

function install_ghostty_fedora {
    echo -n "Are you sure (y/N)? "
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        echo "Installing"
    else
        echo "Exiting"
        return
    fi

    zigup run 0.13.0 build -Doptimize=ReleaseFast -Dapp-runtime=gtk -p $HOME/.local
}

function kill_processes {
    echo -n "Are you sure you want to kill everything matching $1 (y/N)? "
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
        echo "Killing $1"
        ps aux | rg $1 | awk '{print $2}' | xargs kill
    else
        echo "Exiting"
        return
    fi
}

#
# Run other files
#
run_if_exists ~/.bash_secrets
run_if_exists ~/.bash_aliases
run_if_exists ~/.bash_w
run_if_exists ~/.bash_go

export GIT_DISCOVERY_ACROSS_FILESYSTEM=true

#
# Go tooling takes priority
#
export PATH="$HOME/go/bin:$PATH"
if [ -x "$(command -v cargo)" ]; then
    . "$HOME/.cargo/env"
fi

export HELIX_RUNTIME=/usr/share/helix/runtime

# Added by LM Studio CLI tool (lms)
export PATH="$PATH:/Users/jcalabro/.cache/lm-studio/bin"

#
# Remap keys in i3
#

if pgrep -x "i3" > /dev/null; then
    xmodmap -e "remove lock = Caps_Lock" > /dev/null 2>&1
    xmodmap -e "keycode 66 = Control_L"  > /dev/null 2>&1
    xmodmap -e "add control = Control_L" > /dev/null 2>&1
fi

eval "$(direnv hook bash)"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# add Pulumi to the PATH
export PATH=$PATH:/home/jcalabro/.pulumi/bin

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/jcalabro/.lmstudio/bin"
# End of LM Studio CLI section

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

eval "$(rbenv init - bash)"

function install_zls {
    mkdir -p $HOME/local/bin
    mkdir -p $HOME/.local/share/nvim/mason/packages/zls/bin

    zig build -Doptimize=ReleaseSafe
    cp zig-out/bin/zls $HOME/local/bin
    cp zig-out/bin/zls $HOME/.local/share/nvim/mason/packages/zls/bin
}
